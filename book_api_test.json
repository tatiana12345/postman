{
	"info": {
		"_postman_id": "dcfccb99-5400-4268-b7cd-ad1ba563e020",
		"name": "book api test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24265598"
	},
	"item": [
		{
			"name": "status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"console.log(response.status);",
							"//or",
							"console.log(response['status']);",
							"",
							"pm.test(\"STATUS SHOULD BE = OK\", ()=>{",
							"    pm.expect(response.status).to.eql(\"OK\");",
							"});",
							"",
							"",
							"// skipp all following requests",
							"// postman.setNextRequest(null);",
							"",
							"// skip to the request by name",
							"// postman.setNextRequest('order book');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/status",
					"host": [
						"{{url}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "list of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () =>  {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"const nonFictionBooks = response.filter((book) => book.available === true);",
							"",
							"const book = (nonFictionBooks[0]);",
							"",
							"if(book){",
							"    pm.globals.set(\"bookId_var\", book.id);",
							"}",
							"",
							"pm.test(\"Book found\", () => {",
							"    pm.expect(book.type).to.eql(\"non-fiction\");",
							"    pm.expect(book).to.be.an('object');",
							"    pm.expect(book.available).to.be.true;",
							"    //or",
							"    pm.expect(book.available).to.eql(true);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/books?type=non-fiction",
					"host": [
						"{{url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						},
						{
							"key": "limit",
							"value": "6",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "order book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",  () =>  {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"bookId\": {{bookId_var}},\n  \"customerName\": \"{{$randomFullName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders?bookId={{bookId_var}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction",
							"disabled": true
						},
						{
							"key": "bookId",
							"value": "{{bookId_var}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all book orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",  () =>  {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"const books = response.filter((order) => order.quantity >0);",
							"const order = (books[0]);",
							"",
							"if(order){",
							"    pm.globals.set(\"orderId_var\", order.id);",
							"}",
							"",
							"pm.test(\"Order found\", () => {",
							"    pm.expect(order).to.be.an('object');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/orders",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () =>  {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"The book is stock\", () =>  {",
							"     pm.expect(response['current-stock']).to.be > 0;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/books/:bookid?type=fiction",
					"host": [
						"{{url}}"
					],
					"path": [
						"books",
						":bookid"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						}
					],
					"variable": [
						{
							"key": "bookid",
							"value": "{{bookId_var}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "register a client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",  () =>  {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"clientName\": \"{{$randomFullName}}\",\n   \"clientEmail\": \"{{$randomEmail}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api-clients",
					"host": [
						"{{url}}"
					],
					"path": [
						"api-clients"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction",
							"disabled": true
						},
						{
							"key": "bookId",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",  () =>  {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId_var}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\",  () =>  {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n      \"customerName\": \"{{$randomFullName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction",
							"disabled": true
						},
						{
							"key": "bookId",
							"value": "1",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId_var}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\",  () =>  {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction",
							"disabled": true
						},
						{
							"key": "bookId",
							"value": "1",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId_var}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "token",
			"value": "74b1aea0628f05911e5e18187319857df48f4c267b6277ff697b52c4defaf7cc",
			"type": "string"
		}
	]
}